/**
 * atk_register_login.spec.js
 *
 * Registration, login and forgotten password tests.
 */

/** ESLint directives */
/* eslint-disable import/first */

import * as atkCommands from '../support/atk_commands';
import * as atkUtilities from '../support/atk_utilities';

// Set up Playwright.
const { test, expect } = require('@playwright/test');

// Import ATK Configuration.
import atkConfig from '../../playwright.atk.config';

// Standard accounts that use user accounts created
// by QA Accounts. QA Accounts are created when the QA
// Accounts module is enabled.
import qaUserAccounts from '../data/qaUsers.json';

test.describe('User registration and login tasks.', () => {
  //
  // Register the Ethereal user and confirm email reaches Ethereal.
  //
  test('(ATK-PW-1000) Register with form and confirm email with Ethereal. @ATK-PW-1000 @register-login @alters-db @smoke', async ({ page }) => {
    const randomUser = atkUtilities.getRandomUser();
    const userName = randomUser.userName;
    const userEmail = randomUser.userEmail;

    // Begin registration.
    await page.goto(atkConfig.registerUrl);
    await page.getByLabel('E-mail address').fill(userEmail);
    await page.getByLabel('Username').fill(userName);
    await page.getByRole('button', { name: 'Create new account' }).click();

    // Should see the thank-you message.
    await atkCommands.expectMessage(page, 'Thank you for applying for an account.');

    // Give the email some time to arrive, adjust as needed.
    await page.waitForTimeout(1000);

    // Check for registration email at Ethereal.
    await atkCommands.checkEmail(page, userEmail, `Account details for ${userName}`);

    // Clean up
    atkCommands.deleteUserWithUserName(userName, ['--delete-content']);
  });

  //
  // Log in with the login form into the authenticated account.
  //
  test('(ATK-PW-1010) Log in via login form. @ATK-PW-1010 @register-login @smoke', async ({ page, context }) => {
    await atkCommands.logInViaForm(page, context, qaUserAccounts.authenticated);
  });

  //
  // Log in with a POST request into the authenticated account.
  //
  test('(ATK-PW-1011) Log in via POST. @ATK-PW-1011 @register-login @smoke', async ({ page }) => { // eslint-disable-line no-unused-vars
    // TODO: Not ready yet.
    // await atkCommands.logInViaPost(page, context, request, qaUserAccounts.authenticated)
  });

  //
  // Log in with a ULI generated by Drupal.
  //
  test('(ATK-PW-1012) Log in via ULI. @ATK-PW-1012 @register-login @smoke', async ({ page }) => {
    await atkCommands.logInViaUli(page, 1);
    await atkCommands.expectMessage(page, 'You have just used your one-time login link.');
  });

  //
  // Validate reset password function.
  //
  test('(ATK-PW-1030) Reset password. @ATK-PW-1030 @register-login @smoke', async ({ page }) => {
    const randomUser = atkUtilities.getRandomUser();
    const userName = randomUser.userName;
    const userEmail = randomUser.userEmail;

    atkCommands.createUserWithUserObject(randomUser, []);

    // Begin registration.
    await page.goto(atkConfig.resetPasswordUrl);

    await page.getByLabel('Username').fill(userName);
    await page.getByRole('button', { name: 'E-mail new password' }).click();

    // The status box needs a moment to appear.
    await atkCommands.expectMessage(page, 'an email will be sent with instructions to reset your password.');

    // Give the email some time to arrive.
    await page.waitForTimeout(1000);

    // Check for reset password email at Ethereal.
    await atkCommands.checkEmail(page, userEmail, `Replacement login information for ${userName}`)

    atkCommands.deleteUserWithUserName(userName, ['--delete-content']);
  });
});
